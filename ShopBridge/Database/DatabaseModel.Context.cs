//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShopBridge.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShopBridgeEntities : DbContext
    {
        public ShopBridgeEntities()
            : base("name=ShopBridgeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Inventory> Inventory { get; set; }
    
        public virtual ObjectResult<spInsertInventory_Result> spInsertInventory(string name, string description, Nullable<decimal> price)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spInsertInventory_Result>("spInsertInventory", nameParameter, descriptionParameter, priceParameter);
        }
    
        public virtual ObjectResult<spGetAllInventories_Result> spGetAllInventories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllInventories_Result>("spGetAllInventories");
        }
    
        public virtual int spDeleteInventoryWhereIdIs(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteInventoryWhereIdIs", idParameter);
        }
    
        public virtual ObjectResult<spGetInventoryDetailsForId_Result> spGetInventoryDetailsForId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetInventoryDetailsForId_Result>("spGetInventoryDetailsForId", idParameter);
        }
    }
}
